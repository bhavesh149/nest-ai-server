{
  "info": {
    "name": "Gemini AI Chat Platform API",
    "description": "Complete API collection for testing the Gemini-style backend system with OTP-based authentication, chatrooms, and Stripe subscriptions",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "mobileNumber",
      "value": "+1234567890",
      "type": "string"
    },
    {
      "key": "chatroomId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        },
        "description": "Check if the API is running"
      },
      "response": []
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "1. Sign Up",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Signup successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('Signup response:', response);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mobileNumber\": \"{{mobileNumber}}\",\n  \"email\": \"testuser@example.com\",\n  \"username\": \"testuser\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/signup",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "signup"]
            },
            "description": "Register a new user with mobile number and optional info"
          },
          "response": []
        },
        {
          "name": "2. Send OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('OTP sent successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('OTP sent:', response.otp);",
                  "    pm.collectionVariables.set('otp', response.otp);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mobileNumber\": \"{{mobileNumber}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/send-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "send-otp"]
            },
            "description": "Send OTP to user's mobile number (mocked, returned in response)"
          },
          "response": []
        },
        {
          "name": "3. Verify OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('OTP verification successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', response.access_token);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    console.log('Auth token set:', response.access_token);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mobileNumber\": \"{{mobileNumber}}\",\n  \"otp\": \"{{otp}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/verify-otp",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "verify-otp"]
            },
            "description": "Verify OTP and get JWT token"
          },
          "response": []
        },
        {
          "name": "4. Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"mobileNumber\": \"{{mobileNumber}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            },
            "description": "Send OTP for password reset"
          },
          "response": []
        },
        {
          "name": "5. Change Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"currentPassword\": \"oldpassword123\",\n  \"newPassword\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/change-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "change-password"]
            },
            "description": "Change password while logged in"
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get User Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/user/me",
              "host": ["{{baseUrl}}"],
              "path": ["user", "me"]
            },
            "description": "Get details about the currently authenticated user"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Chatroom Management",
      "item": [
        {
          "name": "1. Create Chatroom",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Chatroom created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('chatroomId', response.id);",
                  "    console.log('Chatroom ID set:', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"My First AI Chat\",\n  \"description\": \"Testing Gemini AI integration\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chatroom",
              "host": ["{{baseUrl}}"],
              "path": ["chatroom"]
            },
            "description": "Create a new chatroom"
          },
          "response": []
        },
        {
          "name": "2. List User Chatrooms",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chatroom",
              "host": ["{{baseUrl}}"],
              "path": ["chatroom"]
            },
            "description": "List all chatrooms for the user (cached for 5 minutes)"
          },
          "response": []
        },
        {
          "name": "3. Get Chatroom Details",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/chatroom/{{chatroomId}}",
              "host": ["{{baseUrl}}"],
              "path": ["chatroom", "{{chatroomId}}"]
            },
            "description": "Get detailed information about a specific chatroom"
          },
          "response": []
        },
        {
          "name": "4. Send Message to Gemini",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Hello! Can you help me understand quantum computing?\",\n  \"history\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chatroom/{{chatroomId}}/message",
              "host": ["{{baseUrl}}"],
              "path": ["chatroom", "{{chatroomId}}", "message"]
            },
            "description": "Send a message and receive Gemini AI response"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Subscription Management",
      "item": [
        {
          "name": "1. Get Subscription Status",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/subscription/status",
              "host": ["{{baseUrl}}"],
              "path": ["subscription", "status"]
            },
            "description": "Check user's current subscription tier and usage"
          },
          "response": []
        },
        {
          "name": "2. Subscribe to Pro",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{}"
            },
            "url": {
              "raw": "{{baseUrl}}/subscribe/pro",
              "host": ["{{baseUrl}}"],
              "path": ["subscribe", "pro"]
            },
            "description": "Initiate Pro subscription via Stripe Checkout"
          },
          "response": []
        },
        {
          "name": "3. Stripe Webhook (Internal)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "stripe-signature",
                "value": "test_signature"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"type\": \"checkout.session.completed\",\n  \"data\": {\n    \"object\": {\n      \"id\": \"cs_test_123\",\n      \"metadata\": {\n        \"userId\": \"{{userId}}\"\n      }\n    }\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/webhook/stripe",
              "host": ["{{baseUrl}}"],
              "path": ["webhook", "stripe"]
            },
            "description": "Stripe webhook endpoint (for internal testing only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Test Rate Limiting",
      "item": [
        {
          "name": "Send Multiple Messages (Basic Tier)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Test message {{$randomInt}}\",\n  \"history\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/chatroom/{{chatroomId}}/message",
              "host": ["{{baseUrl}}"],
              "path": ["chatroom", "{{chatroomId}}", "message"]
            },
            "description": "Send multiple messages to test rate limiting (Basic tier: 5 messages/day)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin & Stats",
      "item": [
        {
          "name": "Get API Stats",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/stats",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "stats"]
            },
            "description": "Get general API statistics"
          },
          "response": []
        }
      ]
    }
  ]
}
